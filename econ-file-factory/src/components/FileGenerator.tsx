import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, FileText, Download, FileSpreadsheet } from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from "@/components/ui/textarea";
import DataPreview from "@/components/DataPreview";
import ReturnDataPreview from './returnDataPreview';




interface FileGeneratorProps {
  data: any[];
  headers: string[];
  headerMapping: Record<string, string>;
  regressionOptions: {
    type: string;
    robustSE: boolean;
    clustering: boolean;
    clusterVariable?: string;
    timeTrends: boolean;
    fixedEffectsVariables?: string[];
    interactions?: boolean;
  };
  onBack: () => void;
  onReset: () => void;
}

const FileGenerator = ({ data, headers, headerMapping, regressionOptions, onBack, onReset }: FileGeneratorProps) => {
  const [doFileContent, setDoFileContent] = useState<string>("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState("do-file");
  const [masterData, setMasterData] = useState<any[]>([]);
  const [masterHeaders, setMasterHeaders] = useState<string[]>([]);
  
  // Fetch master.csv from backend
  const fetchMasterData = async () => {
    try {
      const response = await fetch('/uploads/MASTER.csv');
      const csvText = await response.text();
      
      // Parse CSV
      const lines = csvText.split('\n');
      const headers = lines[0].split(',').map(h => h.trim());
      const rows = lines.slice(1).map(line => {
        const values = line.split(',');
        const row: any = {};
        headers.forEach((header, index) => {
          row[header] = values[index]?.trim() || '';
        });
        return row;
      }).filter(row => Object.values(row).some(val => val !== ''));
      
      setMasterHeaders(headers);
      setMasterData(rows);
    } catch (error) {
      console.error('Error fetching master data:', error);
    }
  };
  
  const generateFiles = async () => {
    setIsGenerating(true);
    try {
      ;
      
      // 2. Generate Stata .do file
      const doCode = generateDoCode(headers, headerMapping, regressionOptions);
      setDoFileContent(doCode);
      
      // Success!
      setIsGenerating(false);
    } catch (error) {
      console.error("Error generating files:", error);
      setIsGenerating(false);
    }
  };
  
  const generateDoCode = (
    headers: string[], 
    mapping: Record<string, string>, 
    options: FileGeneratorProps["regressionOptions"]
  ) => {
    // Get variable names by type
    const dependentVar = headers.find(h => mapping[h] === "dependent");
    const independentVars = headers.filter(h => mapping[h] === "independent");
    const controlVars = headers.filter(h => mapping[h] === "control");
    const fixedEffectVars = headers.filter(h => mapping[h] === "fixed_effect");
    const timeVar = headers.find(h => mapping[h] === "time");
    const idVar = headers.find(h => mapping[h] === "id");
    const instrumentVars = headers.filter(h => mapping[h] === "instrument");
    const weightVar = headers.find(h => mapping[h] === "weight");
    const clusterVar = options.clusterVariable || headers.find(h => mapping[h] === "cluster");
    
    // Start building the .do file
    let doCode = `* Generated by EconFile Factory\n* Date: ${new Date().toLocaleDateString()}\n\n`;
    
    // Import data section
    doCode += `* Import the data\nimport delimited "MASTER.csv", clear\n\n`;
    
    // Data cleaning section
    doCode += `* Data cleaning\n`;
    doCode += `describe\n`;
    doCode += `summarize\n\n`;
    
    // Drop missing values
    doCode += `* Drop observations with missing values in key variables\n`;
    if (dependentVar) {
      doCode += `drop if missing(${dependentVar})\n`;
    }
    independentVars.forEach(v => {
      doCode += `drop if missing(${v})\n`;
    });
    doCode += `\n`;
    
    // Generate analysis section
    doCode += `* Regression analysis\n`;
    
    // Different regression types
    switch(options.type) {
      case "OLS":
        doCode += `* OLS Regression\n`;
        
        // Start with basic regression command
        doCode += `reg ${dependentVar} ${independentVars.join(" ")}`;
        
        // Add control variables
        if (controlVars.length > 0) {
          doCode += ` ${controlVars.join(" ")}`;
        }
        
        // Add options
        let regOptions = [];
        
        // Robust SEs
        if (options.robustSE && !options.clustering) {
          regOptions.push("robust");
        }
        
        // Clustering
        if (options.clustering && clusterVar) {
          regOptions.push(`cluster(${clusterVar})`);
        }
        
        // Weight
        if (weightVar) {
          regOptions.push(`[pweight=${weightVar}]`);
        }
        
        // Add options to command
        if (regOptions.length > 0) {
          doCode += `, ${regOptions.join(" ")}`;
        }
        
        doCode += `\n\n`;
        break;
        
      case "IV":
        doCode += `* Instrumental Variables Regression\n`;
        if (instrumentVars.length > 0) {
          doCode += `ivreg2 ${dependentVar} ${controlVars.join(" ")} (${independentVars.join(" ")} = ${instrumentVars.join(" ")})`;
          
          // Add options
          let ivOptions = [];
          
          if (options.robustSE && !options.clustering) {
            ivOptions.push("robust");
          }
          
          if (options.clustering && clusterVar) {
            ivOptions.push(`cluster(${clusterVar})`);
          }
          
          if (ivOptions.length > 0) {
            doCode += `, ${ivOptions.join(" ")}`;
          }
          
          doCode += `\n`;
          
          // First stage
          doCode += `\n* First stage\n`;
          doCode += `reg ${independentVars[0]} ${instrumentVars.join(" ")} ${controlVars.join(" ")}\n`;
        } else {
          doCode += `* ERROR: No instrumental variables selected for IV regression\n`;
        }
        doCode += `\n`;
        break;
        
      case "FixedEffects":
        doCode += `* Fixed Effects Regression\n`;
        
        if (idVar || fixedEffectVars.length > 0 || options.fixedEffectsVariables?.length) {
          const feVars = options.fixedEffectsVariables?.length 
            ? options.fixedEffectsVariables
            : fixedEffectVars.length > 0 ? fixedEffectVars : [idVar];
          
          doCode += `xtset ${feVars[0]}`;
          if (timeVar) {
            doCode += ` ${timeVar}`;
          }
          doCode += `\n`;
          
          // FE regression
          doCode += `xtreg ${dependentVar} ${independentVars.join(" ")}`;
          
          if (controlVars.length > 0) {
            doCode += ` ${controlVars.join(" ")}`;
          }
          
          doCode += `, fe`;
          
          if (options.robustSE && !options.clustering) {
            doCode += ` robust`;
          }
          
          if (options.clustering && clusterVar) {
            doCode += ` cluster(${clusterVar})`;
          }
          
          doCode += `\n`;
          
          // If multiple FE
          if ((fixedEffectVars.length > 1 || (options.fixedEffectsVariables && options.fixedEffectsVariables.length > 1)) 
              && independentVars.length > 0) {
            doCode += `\n* Alternative with multiple fixed effects\n`;
            doCode += `reghdfe ${dependentVar} ${independentVars.join(" ")}`;
            
            if (controlVars.length > 0) {
              doCode += ` ${controlVars.join(" ")}`;
            }
            
            const allFE = options.fixedEffectsVariables || fixedEffectVars;
            doCode += `, absorb(${allFE.join(" ")})`;
            
            if (options.robustSE && !options.clustering) {
              doCode += ` vce(robust)`;
            }
            
            if (options.clustering && clusterVar) {
              doCode += ` vce(cluster ${clusterVar})`;
            }
            
            doCode += `\n`;
          }
        } else {
          doCode += `* ERROR: No fixed effect variables selected\n`;
        }
        doCode += `\n`;
        break;
        
      case "Logit":
      case "Probit":
        const modelType = options.type.toLowerCase();
        doCode += `* ${options.type} Model\n`;
        doCode += `${modelType} ${dependentVar} ${independentVars.join(" ")}`;
        
        if (controlVars.length > 0) {
          doCode += ` ${controlVars.join(" ")}`;
        }
        
        let binaryOptions = [];
        
        if (options.robustSE && !options.clustering) {
          binaryOptions.push("robust");
        }
        
        if (options.clustering && clusterVar) {
          binaryOptions.push(`cluster(${clusterVar})`);
        }
        
        if (binaryOptions.length > 0) {
          doCode += `, ${binaryOptions.join(" ")}`;
        }
        
        doCode += `\n\n* Marginal effects\n`;
        doCode += `margins, dydx(*)\n\n`;
        break;
    }
    
    // Additional analysis sections
    
    // Summary statistics
    doCode += `\n* Summary statistics\n`;
    doCode += `eststo clear\n`;
    doCode += `eststo: estpost summarize `;
    const allVars = [dependentVar, ...independentVars, ...controlVars].filter(Boolean);
    doCode += allVars.join(" ");
    doCode += `\n`;
    doCode += `esttab using summary_stats.rtf, cells("mean sd min max") label nodepvar replace\n\n`;
    
    // Correlation matrix
    doCode += `* Correlation matrix\n`;
    doCode += `pwcorr ${allVars.join(" ")}, sig star(.05)\n\n`;
    
    // Graphs
    if (dependentVar && independentVars.length > 0) {
      doCode += `* Graphs\n`;
      doCode += `graph twoway scatter ${dependentVar} ${independentVars[0]}, name(scatter1, replace)\n`;
      
      if (timeVar) {
        doCode += `\n* Time series plot\n`;
        doCode += `graph twoway line ${dependentVar} ${timeVar}, name(timeseries, replace)\n`;
      }
    }
    
    return doCode;
  };
  
  const downloadDoFile = (content: string, fileName: string): void => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadExistingCsv = (fileUrl: string, fileName: string): void => {
    const link = document.createElement('a');
    link.href = fileUrl;
    link.setAttribute('download', fileName.endsWith('.csv') ? fileName : `${fileName}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleDownloadExistingCsv = () => {
    const fileName = 'cleaned_data_analysis.do';
    downloadExistingCsv(doFileContent, fileName);
  };
  
  
  
  
  

  
  const handleDownloadDoFile = () => {
    const fileName = 'cleaned_data_analysis.do';
    downloadDoFile(doFileContent, fileName);
  };

  const handleDownloadCleanedCsv = () => {
    // Convert data to CSV format
    const csvHeader = headers.join(',');
    const csvRows = data.map(row => 
      headers.map(header => {
        const value = row[header];
        // Escape commas and quotes in values
        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value || '';
      }).join(',')
    );
    const csvContent = [csvHeader, ...csvRows].join('\n');
    
    const fileName = 'cleaned_data.csv';
    downloadDoFile(csvContent, fileName);
  };
  
  // Load master data and generate do file on component mount
  React.useEffect(() => {
    fetchMasterData();
    // Generate the .do file content immediately
    const doCode = generateDoCode(headers, headerMapping, regressionOptions);
    setDoFileContent(doCode);
  }, []);
  
  return (
    <Card className="w-full">
      <CardHeader>
                 <CardTitle>Generated Files</CardTitle>
         <CardDescription>
           Your Stata .do file and cleaned CSV file are ready. Preview and download below.
         </CardDescription>
       </CardHeader>
       <CardContent>
         <Tabs defaultValue="do-file" value={activeTab} onValueChange={setActiveTab}>
           <TabsList className="grid w-full grid-cols-2">
             <TabsTrigger value="do-file" className="flex gap-2 items-center">
               <FileText className="h-4 w-4" />
               Stata .do File
             </TabsTrigger>
             <TabsTrigger value="csv-file" className="flex gap-2 items-center">
               <FileSpreadsheet className="h-4 w-4" />
               Master CSV File
             </TabsTrigger>
          </TabsList>
          
          <TabsContent value="do-file" className="mt-6">
            <div className="relative">
              <pre className="bg-gray-50 p-4 rounded border overflow-auto max-h-[400px] text-sm font-mono">
                {doFileContent}
              </pre>
              <Button
                variant="secondary"
                size="sm"
                className="absolute top-2 right-2 gap-1"
                onClick={handleDownloadDoFile}
              >
                <Download className="h-4 w-4" />
                Download
              </Button>
            </div>
            <div className="mt-4 text-sm text-muted-foreground">
              <p>
                <strong>Note:</strong> This is a generated .do file based on your selections.
                You may need to adjust it to fit your specific analysis requirements.
              </p>
            </div>
          </TabsContent>
          
                     <TabsContent value="csv-file" className="mt-6">
             <div className="space-y-4">
               <ReturnDataPreview headers={headers} data={data} />
             </div>
             <div className="flex justify-end mt-4">
               <Button 
                 onClick={handleDownloadCleanedCsv} 
                 className="gap-2"
               >
                 <Download className="h-4 w-4" />
                 Download Cleaned CSV File
               </Button>
             </div>
           </TabsContent>
         </Tabs>
         
         <div className="flex justify-between mt-8">
           <Button variant="outline" onClick={onBack} className="gap-2">
             <ArrowLeft className="h-4 w-4" />
             Back
           </Button>
           <Button variant="default" onClick={onReset}>
             Start New Analysis
           </Button>
         </div>
        </CardContent>
      </Card>
    );
  };

export default FileGenerator;







